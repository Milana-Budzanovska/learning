import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';

const NeuroReport = () => {
  const [profile, setProfile] = useState('');
  const [explanation, setExplanation] = useState('');
  const [percentages, setPercentages] = useState({
    analyst: 0,
    creator: 0,
    dynamic: 0,
    dreamer: 0,
    sensor: 0,
    tactician: 0,
  });
  const navigate = useNavigate();

  useEffect(() => {
    // –§–µ–π–∫–æ–≤—ñ –¥–∞–Ω—ñ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ —É—á–Ω—è
    const timeSpent = Math.floor(Math.random() * 600) + 100; // —Å–µ–∫—É–Ω–¥
    const formatsChanged = Math.floor(Math.random() * 10);
    const cursorMoves = Math.floor(Math.random() * 1000);
    const mood = localStorage.getItem('mood') || '—Å–ø–æ–∫—ñ–π–Ω–∏–π';

    const points = {
      analyst: timeSpent > 400 && formatsChanged < 4 ? 1 : 0,
      creator: formatsChanged > 5 ? 1 : 0,
      dynamic: cursorMoves > 500 ? 1 : 0,
      dreamer: timeSpent > 500 && cursorMoves < 300 ? 1 : 0,
      sensor: formatsChanged > 5 && cursorMoves > 500 ? 1 : 0,
      tactician: formatsChanged <= 3 && cursorMoves >= 300 ? 1 : 0,
    };

    const total = Object.values(points).reduce((acc, val) => acc + val, 0) || 1;
    const percents = Object.fromEntries(
      Object.entries(points).map(([key, val]) => [key, Math.round((val / total) * 100)])
    );
    setPercentages(percents);

    const maxProfile = Object.entries(percents).sort((a, b) => b[1] - a[1])[0][0];
    setProfile(maxProfile);

    const explanations: Record<string, string> = {
      analyst: 'üî¨ –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –¥–æ—Å–ª—ñ–¥–Ω–∏–∫ ‚Äî —Ç–∏ —É–≤–∞–∂–Ω–æ –¥–æ—Å–ª—ñ–¥–∂—É—î—à –¥–µ—Ç–∞–ª—ñ —Ç–∞ –ø–æ–º—ñ—á–∞—î—à –Ω–∞–≤—ñ—Ç—å –¥—Ä—ñ–±–Ω–∏—Ü—ñ. –Ø–∫ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –Ω–∞—É–∫–æ–≤–µ—Ü—å!',
      creator: 'üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –¥–æ—Å–ª—ñ–¥–Ω–∏–∫ ‚Äî —Ç–∏ –æ–±–æ–∂–Ω—é—î—à –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç —ñ –∑–Ω–∞—Ö–æ–¥–∏—à –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è!',
      dynamic: 'üöÄ –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –¥–æ—Å–ª—ñ–¥–Ω–∏–∫ ‚Äî —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ç–≤—ñ–π —Å—Ç–∏–ª—å. –¢–∏ –±–∞–≥–∞—Ç–æ —Ä—É—Ö–∞—î—à—Å—è —ñ —à—É–∫–∞—î—à –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ —à–ª—è—Ö–∏!',
      dreamer: 'üåô –ú—Ä—ñ–π–ª–∏–≤–∏–π —ñ–Ω—Ç—Ä–æ–≤–µ—Ä—Ç ‚Äî —Ç–∏ –∑–æ—Å–µ—Ä–µ–¥–∂–µ–Ω–∏–π —ñ –ª—é–±–∏—à –ø–æ–¥—É–º–∞—Ç–∏, –∑–∞–Ω—É—Ä–∏—Ç–∏—Å—å —É —Å–≤—ñ–π —Å–≤—ñ—Ç.',
      sensor: 'üåà –°–µ–Ω—Å–æ—Ä–Ω–∏–π —à—É–∫–∞—á ‚Äî —Ç–æ–±—ñ –ø–æ–¥–æ–±–∞—é—Ç—å—Å—è –∫–æ–ª—å–æ—Ä–∏, —Ä—É—Ö —ñ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å. –¢–∏ –≤–∏–≤—á–∞—î—à —É—Å–µ –∑ –≤—ñ–¥—á—É—Ç—Ç—è–º–∏!',
      tactician: 'üéØ –¢–∞–∫—Ç–∏–∫-—Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á ‚Äî —Ç–∏ –Ω–µ –º–µ—Ç—É—à–∏—à—Å—è, –∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ –¥—ñ—î—à —É –º–µ–∂–∞—Ö –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É.',
    };
    setExplanation(explanations[maxProfile]);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-b from-pink-100 to-purple-100 p-6 font-sans">
      <div className="max-w-3xl mx-auto bg-white rounded-3xl shadow-2xl p-8">
        <h1 className="text-3xl font-bold text-center text-purple-800 mb-6">üß† –¢–≤—ñ–π –Ω–µ–π—Ä–æ–ø–æ–≤–µ–¥—ñ–Ω–∫–æ–≤–∏–π —Å–ª—ñ–¥</h1>

        <div className="mb-4 text-lg text-gray-800 text-center">
          –ú–∏ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞–ª–∏ —Ç–≤–æ—ó –¥—ñ—ó –ø—ñ–¥ —á–∞—Å —É—Ä–æ–∫—ñ–≤: —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É —Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏–≤, —è–∫ —á–∞—Å—Ç–æ –∑–º—ñ–Ω—é–≤–∞–≤ —Ñ–æ—Ä–º–∞—Ç,
          —è–∫ –∞–∫—Ç–∏–≤–Ω–æ —Ä—É—Ö–∞–≤ –º–∏—à–∫–æ—é —ñ –Ω–∞–≤—ñ—Ç—å —è–∫–∏–π –±—É–≤ —Ç–≤—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π üßê
        </div>

        <div className="text-2xl font-bold text-center text-purple-700 mb-4">
          –¢–≤—ñ–π –≥–æ–ª–æ–≤–Ω–∏–π —Ç–∏–ø: {explanation}
        </div>

        <div className="grid grid-cols-2 sm:grid-cols-3 gap-4 mt-6">
          {Object.entries(percentages).map(([key, value]) => (
            <div key={key} className="bg-purple-50 p-4 rounded-xl shadow text-center">
              <div className="font-semibold capitalize text-purple-800">{key}</div>
              <div className="text-3xl text-purple-600">{value}%</div>
            </div>
          ))}
        </div>

        <div className="mt-10 text-center">
          <button
            onClick={() => navigate('/')}
            className="bg-purple-500 text-white px-6 py-3 rounded-full shadow hover:bg-purple-600"
          >
            üîÑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –º–µ–Ω—é
          </button>
        </div>
      </div>
    </div>
  );
};

export default NeuroReport;

