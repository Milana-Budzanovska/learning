import React, { useState, useEffect } from 'react';

const KinestheticLesson: React.FC = () => {
  const [mazeCompleted, setMazeCompleted] = useState(false);
  const [shapesSelected, setShapesSelected] = useState<string[]>([]);
  const [incorrectShapes, setIncorrectShapes] = useState<string[]>([]);
  const [pattern, setPattern] = useState<string[]>([]);
  const [patternComplete, setPatternComplete] = useState(false);
  const [attemptsLeft, setAttemptsLeft] = useState(2);
  const [language, setLanguage] = useState<'uk' | 'en'>('uk');

  const playAudio = (src: string) => {
    const audio = new Audio(src);
    audio.play();
  };

  const speak = (text: string) => {
    if (language === 'en') {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'en-US';
      utterance.pitch = 1.2;
      utterance.rate = 0.95;
      utterance.volume = 1;

      const voices = speechSynthesis.getVoices();
      const voice = voices.find(v => v.lang === 'en-US' && v.name.toLowerCase().includes('google'));
      if (voice) utterance.voice = voice;
      speechSynthesis.cancel();
      speechSynthesis.speak(utterance);
    }
  };

  const stopSpeaking = () => speechSynthesis.cancel();

  const shapeAudios: Record<string, string> = {
    '–ö–æ–ª–æ': '/assets/–∫–æ–ª–æ.mp3',
    '–ö–≤–∞–¥—Ä–∞—Ç': '/assets/–∫–≤–∞–¥—Ä–∞—Ç.mp3',
    '–û–≤–∞–ª': '/assets/–æ–≤–∞–ª.mp3',
    '–¢—Ä–∏–∫—É—Ç–Ω–∏–∫': '/assets/—Ç—Ä–∏–∫—É—Ç–Ω–∏–∫.mp3',
    '–ü—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫': '/assets/–ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫.mp3',
    '–•–º–∞—Ä–∞': '/assets/—Ö–º–∞—Ä–∞.mp3',
    'Circle': '/assets/–∫–æ–ª–æ.mp3',
    'Square': '/assets/–∫–≤–∞–¥—Ä–∞—Ç.mp3',
    'Oval': '/assets/–æ–≤–∞–ª.mp3',
    'Triangle': '/assets/—Ç—Ä–∏–∫—É—Ç–Ω–∏–∫.mp3',
    'Rectangle': '/assets/–ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫.mp3',
    'Cloud': '/assets/—Ö–º–∞—Ä–∞.mp3'
  };

  const colorAudios: Record<string, string> = {
    'üîµ': '/assets/—Å–∏–Ω—ñ–π.mp3',
    'üî¥': '/assets/—á–µ—Ä–≤–æ–Ω–∏–π.mp3',
    'üü°': '/assets/–∂–æ–≤—Ç–∏–π .mp3'
  };

  const toggleShape = (shape: string) => {
    const audioFile = shapeAudios[shape];
    if (audioFile) playAudio(audioFile);

    setShapesSelected(prev => {
      const isSelected = prev.includes(shape);
      const updated = isSelected ? prev.filter(s => s !== shape) : [...prev, shape];

      if (!isSelected) {
        const correctShapes = language === 'uk' ? ['–ö–æ–ª–æ', '–û–≤–∞–ª', '–•–º–∞—Ä–∞'] : ['Circle', 'Oval', 'Cloud'];
        if (correctShapes.includes(shape)) {
          playAudio('/assets/–ú–æ–ª–æ–¥–µ—Ü—å, –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å .mp3');
        } else {
          playAudio('/assets/–æ–π–æ–π,_–ø–æ–º–∏–ª–∫–∞,_–Ω–µ_–∑–∞—Å–º—É—á—É–π—Å—è,_—Å–ø—Ä–æ–±—É–π_—ñ—â–µ.mp3');
          setIncorrectShapes(prevIncorrect => [...prevIncorrect, shape]);
        }
      }

      return updated;
    });
  };

  const handlePatternClick = (color: string) => {
    const audioFile = colorAudios[color];
    if (audioFile) playAudio(audioFile);

    const newPattern = [...pattern, color];
    setPattern(newPattern);

    const correct = ['üîµ', 'üî¥', 'üü°', 'üîµ'];
    const isCorrectSoFar = correct.slice(0, newPattern.length).every((v, i) => v === newPattern[i]);

    if (!isCorrectSoFar) {
      if (attemptsLeft > 0) {
        setAttemptsLeft(prev => prev - 1);
        alert(language === 'uk'
          ? `üö´ –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑. –ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: ${attemptsLeft}`
          : `üö´ Something went wrong. Try again. Attempts left: ${attemptsLeft}`);
        setPattern([]);
      } else {
        alert(language === 'uk'
          ? 'üò¢ –ù–µ–º–∞—î –±—ñ–ª—å—à–µ —Å–ø—Ä–æ–±. –ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É –≤–∏–π–¥–µ –∫—Ä–∞—â–µ!'
          : 'üò¢ No more attempts. You‚Äôll do better next time!');
      }
      return;
    }

    if (newPattern.length === correct.length) {
      setPatternComplete(true);
    }
  };

  const shapeOptions = language === 'uk'
    ? ['–ö–æ–ª–æ', '–ö–≤–∞–¥—Ä–∞—Ç', '–û–≤–∞–ª', '–¢—Ä–∏–∫—É—Ç–Ω–∏–∫', '–ü—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫', '–•–º–∞—Ä–∞']
    : ['Circle', 'Square', 'Oval', 'Triangle', 'Rectangle', 'Cloud'];

  return (
    <div className="min-h-screen bg-gradient-to-b from-yellow-100 to-pink-100 p-6 font-sans">
      <div className="max-w-5xl mx-auto bg-white rounded-3xl shadow-xl p-8">
        <div className="flex justify-between mb-4">
          <img src="/assets/flik.png" alt="Flik" className="w-20 h-20 rounded-full" />
          <button
            onClick={() => setLanguage(language === 'uk' ? 'en' : 'uk')}
            className="bg-purple-200 hover:bg-purple-300 text-purple-800 font-semibold py-2 px-4 rounded-full shadow"
          >
            {language === 'uk' ? 'üåê English version' : 'üåê –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≤–µ—Ä—Å—ñ—è'}
          </button>
        </div>

        <h1 className="text-3xl font-bold text-purple-700 text-center mb-8">
          {language === 'uk' ? '–ö—ñ–Ω–µ—Å—Ç–µ—Ç–∏—á–Ω–∏–π —É—Ä–æ–∫' : 'Kinesthetic Lesson'}
        </h1>

        <!-- Maze and Shapes section stays the same -->

        <section className="mb-12">
          <h2 className="text-2xl font-bold text-blue-600 mb-4 cursor-pointer" onClick={() => language === 'uk' ? playAudio('/assets/–≤—ñ–¥—Ç–≤–æ—Ä–∏ —à–∞–±–ª–æ–Ω.mp3') : speak('Repeat the pattern')}>
            üé® {language === 'uk' ? '–í—ñ–¥—Ç–≤–æ—Ä–∏ —à–∞–±–ª–æ–Ω' : 'Repeat the pattern'}
          </h2>
          <p className="text-center mb-3">
            {language === 'uk'
              ? '–ü–æ–≤—Ç–æ—Ä—é–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å: üîµüî¥üü°üîµ...'
              : 'Repeat the sequence: üîµüî¥üü°üîµ...'}
          </p>
          <div className="flex justify-center gap-4 mb-4">
            {['üîµ', 'üî¥', 'üü°'].map((color, idx) => (
              <button
                key={idx}
                onClick={() => handlePatternClick(color)}
                className="text-4xl w-20 h-20 bg-white rounded-full shadow border hover:bg-gray-100"
              >
                {color}
              </button>
            ))}
          </div>
          {patternComplete && (
            <p className="text-center text-green-600 font-semibold">
              {language === 'uk'
                ? '‚úÖ –ß—É–¥–æ–≤–æ! –í—ñ–∑–µ—Ä—É–Ω–æ–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!'
                : '‚úÖ Great! Pattern repeated correctly!'}
            </p>
          )}
        </section>

        <div className="flex justify-center mt-6">
          <button
            onClick={stopSpeaking}
            className="bg-red-500 text-white px-4 py-2 rounded-full hover:bg-red-600 transition"
          >
            {language === 'uk' ? 'üõë –ó—É–ø–∏–Ω–∏—Ç–∏ –º–æ–≤–ª–µ–Ω–Ω—è' : 'üõë Stop voice'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default KinestheticLesson;
